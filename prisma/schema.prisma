generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @unique
  first_name String
  last_name  String
  email      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  Artist     Artist?
  artworks   Artwork[]
  bids       Bid[]
  follows    Follow[]
}

model Artist {
  id                   Int        @id @default(autoincrement())
  userId               Int        @unique
  user                 User       @relation(fields: [userId], references: [id])
  nickname             String?
  avatar_path          String?
  myStory              String?
  myBio                String?
  artworkPickUpAddress String?
  contactNumber        String?
  gcash                String?
  paymaya              String?
  interests            Interest[]
  follows              Follow[]
  status               ArtistStatus
  auctions             Auction[]
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
}

enum ArtistStatus {
  PENDING
  APPROVED
  REJECTED
}

model Follow {
  id       Int    @id @default(autoincrement())
  artist   Artist @relation(fields: [artistId], references: [id])
  artistId Int
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
}

model Interest {
  id       Int    @id @default(autoincrement())
  name     String
  artist   Artist @relation(fields: [artistId], references: [id])
  artistId Int
}

model Artwork {
  id                  Int      @id @default(autoincrement())
  name                String
  description         String   @db.LongText
  created_at          DateTime @default(now())
  updated_at          DateTime @default(now())
  artist              User     @relation(fields: [artist_id], references: [id])
  artist_id           Int
  auction             Auction? @relation(fields: [auction_id], references: [id])
  auction_id          Int?
  bids                Bid[]
  highest_bid         ArtworkHighestBid?
  minimum_bid         Float?
}

model Auction {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @db.LongText
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  start_date  DateTime @db.DateTime
  end_date    DateTime @db.DateTime
  artworks    Artwork[]
  artist      Artist?  @relation(fields: [artistId], references: [id])
  artistId    Int?
}

model Bid {
  id                   Int     @id @default(autoincrement())
  user                 User    @relation(fields: [userId], references: [id])
  userId               Int 
  amount               Float
  artwork              Artwork @relation(fields: [artworkId], references: [id])
  artworkId            Int
  highest_bid_artwork  ArtworkHighestBid? 
}

model ArtworkHighestBid {
  artwork              Artwork @relation(fields: [artworkId], references: [id])
  artworkId            Int     @id @unique 
  bid                  Bid?    @relation(fields: [bidId], references: [id])
  bidId                Int?    @unique
  version              Int     @default(1)
}
