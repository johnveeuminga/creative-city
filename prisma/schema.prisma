generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @unique @default(autoincrement())
  cognitoId  String   @unique
  name       String
  email      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  Artist     Artist?
  artworks   Artwork[]
  bids       Bid[]
  follows    Follow[]
  purchases  ArtworkPurchase[]
  fromMessages Message[] @relation("Message_fromUser")
  toMessages Message[] @relation("Message_toUser")
}

model Artist {
  id                   Int        @id @default(autoincrement())
  userId               Int        @unique
  user                 User       @relation(fields: [userId], references: [id])
  nickname             String?
  avatar_path          String?
  myStory              String?    @db.LongText
  myBio                String?    @db.LongText
  artworkPickUpAddress String?
  contactNumber        String?
  gcash                String?
  paymaya              String?
  interests            Interest[]
  follows              Follow[]
  status               ArtistStatus
  auctions             Auction[]
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
}

enum ArtistStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PAID
  PENDING
  FAILED
}

model Follow {
  id       Int    @id @default(autoincrement())
  artist   Artist @relation(fields: [artistId], references: [id])
  artistId Int
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
}

model Interest {
  id       Int    @id @default(autoincrement())
  name     String
  artist   Artist @relation(fields: [artistId], references: [id])
  artistId Int
}

model Artwork {
  id                  Int      @id @default(autoincrement())
  name                String
  description         String   @db.LongText
  created_at          DateTime @default(now())
  updated_at          DateTime @default(now())
  artist              User     @relation(fields: [artist_id], references: [id])
  artist_id           Int
  auction             Auction? @relation(fields: [auction_id], references: [id])
  auction_id          Int?
  bids                Bid[]
  highest_bid         ArtworkHighestBid?
  minimum_bid         Float?
  media               ArtworkMedia[]
  price               Float?
  inStock             Boolean @default(true)
  purchase            ArtworkPurchase[]
}

model ArtworkPurchase {
  id                  Int @id @default(autoincrement())
  artworkId           Int 
  artwork             Artwork @relation(fields: [artworkId], references: [id])
  userId              Int
  user                User    @relation(fields: [userId], references: [id])
  xendItRefId         String
  paymentStatus       PaymentStatus @default(value: PENDING)
  isDraft             Boolean @default(false)               
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now())
}

model Auction {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @db.LongText
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  start_date  DateTime
  end_date    DateTime 
  artworks    Artwork[]
  artist      Artist?  @relation(fields: [artistId], references: [id])
  artistId    Int?
  isProcessed Boolean @default(false)
}

model Bid {
  id                   Int     @id @default(autoincrement())
  user                 User    @relation(fields: [userId], references: [id])
  userId               Int 
  amount               Float
  artwork              Artwork @relation(fields: [artworkId], references: [id])
  artworkId            Int
  highest_bid_artwork  ArtworkHighestBid? 
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now())
}

model ArtworkHighestBid {
  artwork              Artwork @relation(fields: [artworkId], references: [id])
  artworkId            Int     @id @unique 
  bid                  Bid     @relation(fields: [bidId], references: [id])
  bidId                Int     @unique
  processed            Boolean @default(false)
  version              Int     @default(1)
}

model ArtworkMedia {
  id                  Int      @id @default(autoincrement())
  artwork             Artwork  @relation(fields: [artworkId], references: [id])
  artworkId           Int      
  filePath            String   @db.MediumText
  order               Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now())
}

model Message {
  id                 Int      @id @default(autoincrement())
  fromUserId         Int
  fromUser           User     @relation("Message_fromUser", fields: [fromUserId], references: [id])
  toUserId           Int
  toUser             User     @relation("Message_toUser", fields: [toUserId], references: [id])
  isRead             Boolean  @default(false)
  message            String   @db.LongText
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())
}